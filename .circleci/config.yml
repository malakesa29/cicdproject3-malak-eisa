version: 2.1

defaults: &defaults
  docker:
      - image: circleci/node:13.8.0

defaults1: &defaults1
  docker:
      - image: amazon/aws-cli

defaults2: &defaults2
  docker:
      - image: python:3.7-alpine3.11

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack \
              --region us-east-1 \
              --stack-name udapeople-prod-backendstack-<< parameters.workflow_id >>
            aws cloudformation delete-stack \
              --region us-east-1 \
              --stack-name udapeople-prod-frontendstack-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1')
            #SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert              
            fi
            
jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm install
            npm build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
                
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            ls -ltr
            cd backend
            npm install 
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
            
  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - run:
          name: auditing the packages
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
           

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd  backend
            npm i
            npm audit fix --audit-level=critical
  deploy-infrastructure:
    <<: *defaults1
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install  tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-prod-backendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            URLS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}"  --output text) 
            echo "URLS=$URLS"
            echo "${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-prod-frontendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              ARN=$(aws s3 ls | grep udapeople)
              echo "ARN=$ARN"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            #here
            aws ec2 describe-instances \
                --region us-east-1 \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID}
      #Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    <<: *defaults2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a6:f5:25:92:35:0c:cc:02:6f:8e:a7:20:fa:64:a9:02"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add openssh-client
            pip install awscli
      - run:
          name: Configure server
          command: |
            aws ec2 describe-instances \
                --region us-east-1 \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml
      - run:
          name: Configure node-exporter
          command: |
            # aws ec2 describe-instances \
            #     --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #     --filters "Name=tag:Name,Values=backend-$CIRCLE_WORKFLOW_ID" \
            #     --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            export ansible_host_key_checking= false
            ansible-playbook -i inventory.txt  configure-prometheus-node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID}


  run-migrations:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            mkdir -p backend
            cd backend
            export NODE_ENV=production
            export ENVIRONMENT=production
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            # Use these values for the local PG database from the Docker Compose2 file
            export TYPEORM_HOST=postgres.crjemwqtus8k.us-east-1.rds.amazonaws.com
            export TYPEORM_PORT=5432
            export TYPEORM_USERNAME=postgres
            export TYPEORM_PASSWORD=Autoauto12
            export TYPEORM_DATABASE=postgres
            npm install
            npm run build --clean
            npm run migrations > output.txt
            cat output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if [ `grep -c "has been executed successfully" output.txt` -gt 0 ] 
            then
             curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=${API_URL}" >> ~/project/frontend/.env
            echo "NODE_ENV=production" >> ~/project/frontend/.env
            echo "ENVIRONMENT=production" >> ~/project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
                    
  deploy-backend:
    <<: *defaults2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a6:f5:25:92:35:0c:cc:02:6f:8e:a7:20:fa:64:a9:02"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 20m
          command: |
            echo ENVIROMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=postgres.crjemwqtus8k.us-east-1.rds.amazonaws.com >> "backend/.env"
            echo TYPEORM_PORT=5432 >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=Autoauto12 >> "backend/.env"
            echo TYPEORM_DATABASE=postgres >> "backend/.env"
            cd backend
            npm i
            npm run build
            cp -rf node_modules ./dist/
            echo ENVIROMENT=production >> ~/project/backend/dist/.env
            echo TYPEORM_CONNECTION=postgres >> ~/project/backend/dist/.env
            echo TYPEORM_MIGRATIONS_DIR=./migrations >> ~/project/backend/dist/.env
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> ~/project/backend/dist/.env
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> ~/project/backend/dist/.env
            echo TYPEORM_HOST=postgres.crjemwqtus8k.us-east-1.rds.amazonaws.com >> ~/project/backend/dist/.env
            echo TYPEORM_PORT=5432 >> ~/project/backend/dist/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/dist/.env
            echo TYPEORM_PASSWORD=Autoauto12 >> ~/project/backend/dist/.env
            echo TYPEORM_DATABASE=postgres >> ~/project/backend/dist/.env
            cat dist/.env
            mkdir -p /root/project/.circleci/ansible/roles/deploy/files/
            cp  ~/project/backend/dist/.env /root/project/.circleci/ansible/roles/deploy/files/
            tar -czvf app.tar.gz ./*
            cp app.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            # ls/root/project/backend
            # cd dist
            # ls
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            aws ec2 describe-instances \
                --region us-east-1 \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 


  smoke-test:
    <<: *defaults2
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm bash
            pip install awscli
      - run:
          name: Get Backend URL and performe smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
             --region us-east-1 \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      
  cloudfront-update:
    <<: *defaults1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query 'Exports[?Name==`WorkflowID`].Value' \
            --no-paginate --output text)
            
            export STACKS=($aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate)
            
            echo Old Workflow Id: "${OldWorkflowID}"

            aws cloudformation deploy \
             --region us-east-1 \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name=udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udapeople

            echo New Workflow Id: "${CIRCLE_WORKFLOW_ID}"

     
     

  cleanup:
    <<: *defaults2
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and delete old infrastructure
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==`WorkflowID`].Value" \
              --no-paginate --output text)
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate))
            
            echo Old Workflow Id: "${OldWorkflowID}"
            echo New Workflow Id: ${CIRCLE_WORKFLOW_ID}
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack \
                --stack-name "udapeople-prod-backendstack-${OldWorkflowID}"
              aws cloudformation delete-stack \
                --stack-name "udapeople-prod-frontendstack-${OldWorkflowID}"
            fi
           

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          reqttuires: [cloudfront-update]
